// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'noti_table.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1408810091863519604),
      name: 'NotificationMessageTable',
      lastPropertyId: const IdUid(12, 1047770635835148676),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2901127963852529935),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7973546297520689230),
            name: 'notificationType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4821729480163710293),
            name: 'channelId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 780568422730309062),
            name: 'channelTitle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4107944606194661812),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 619083426793597592),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3742741012264894200),
            name: 'messageId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4784972174309951317),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 9017878032333841330),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8424381868490519218),
            name: 'isComplete',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 617458846702571088),
            name: 'workspaceId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1047770635835148676),
            name: 'replyToId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 1408810091863519604),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    NotificationMessageTable: EntityDefinition<NotificationMessageTable>(
        model: _entities[0],
        toOneRelations: (NotificationMessageTable object) => [],
        toManyRelations: (NotificationMessageTable object) => {},
        getId: (NotificationMessageTable object) => object.id,
        setId: (NotificationMessageTable object, int id) {
          object.id = id;
        },
        objectToFB: (NotificationMessageTable object, fb.Builder fbb) {
          final notificationTypeOffset =
              fbb.writeString(object.notificationType);
          final channelIdOffset = fbb.writeString(object.channelId);
          final channelTitleOffset = fbb.writeString(object.channelTitle);
          final userIdOffset = fbb.writeString(object.userId);
          final userNameOffset = fbb.writeString(object.userName);
          final messageIdOffset = fbb.writeString(object.messageId);
          final messageOffset = fbb.writeString(object.message);
          final dateOffset = fbb.writeString(object.date);
          final workspaceIdOffset = fbb.writeString(object.workspaceId);
          final replyToIdOffset = fbb.writeString(object.replyToId);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, notificationTypeOffset);
          fbb.addOffset(2, channelIdOffset);
          fbb.addOffset(3, channelTitleOffset);
          fbb.addOffset(4, userIdOffset);
          fbb.addOffset(5, userNameOffset);
          fbb.addOffset(6, messageIdOffset);
          fbb.addOffset(7, messageOffset);
          fbb.addOffset(8, dateOffset);
          fbb.addBool(9, object.isComplete);
          fbb.addOffset(10, workspaceIdOffset);
          fbb.addOffset(11, replyToIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = NotificationMessageTable(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              notificationType: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              channelId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              channelTitle: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              userName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              messageId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              message: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              date: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              isComplete: const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false),
              workspaceId: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              replyToId: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [NotificationMessageTable] entity fields to define ObjectBox queries.
class NotificationMessageTable_ {
  /// see [NotificationMessageTable.id]
  static final id = QueryIntegerProperty<NotificationMessageTable>(
      _entities[0].properties[0]);

  /// see [NotificationMessageTable.notificationType]
  static final notificationType =
      QueryStringProperty<NotificationMessageTable>(_entities[0].properties[1]);

  /// see [NotificationMessageTable.channelId]
  static final channelId =
      QueryStringProperty<NotificationMessageTable>(_entities[0].properties[2]);

  /// see [NotificationMessageTable.channelTitle]
  static final channelTitle =
      QueryStringProperty<NotificationMessageTable>(_entities[0].properties[3]);

  /// see [NotificationMessageTable.userId]
  static final userId =
      QueryStringProperty<NotificationMessageTable>(_entities[0].properties[4]);

  /// see [NotificationMessageTable.userName]
  static final userName =
      QueryStringProperty<NotificationMessageTable>(_entities[0].properties[5]);

  /// see [NotificationMessageTable.messageId]
  static final messageId =
      QueryStringProperty<NotificationMessageTable>(_entities[0].properties[6]);

  /// see [NotificationMessageTable.message]
  static final message =
      QueryStringProperty<NotificationMessageTable>(_entities[0].properties[7]);

  /// see [NotificationMessageTable.date]
  static final date =
      QueryStringProperty<NotificationMessageTable>(_entities[0].properties[8]);

  /// see [NotificationMessageTable.isComplete]
  static final isComplete = QueryBooleanProperty<NotificationMessageTable>(
      _entities[0].properties[9]);

  /// see [NotificationMessageTable.workspaceId]
  static final workspaceId = QueryStringProperty<NotificationMessageTable>(
      _entities[0].properties[10]);

  /// see [NotificationMessageTable.replyToId]
  static final replyToId = QueryStringProperty<NotificationMessageTable>(
      _entities[0].properties[11]);
}
